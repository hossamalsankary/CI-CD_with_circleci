version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@2.0.3
# commands:
#   # destroy-environment:
#   #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#   #   parameters:
#   #     # Add parameter here
#   #   steps:
#   #     - run:
#   #         name: Destroy environments
#   #         when: on_fail
#   #         command: |
#   #           # Your code here
#   #           exit 1

#   # revert-migrations:
#   description: Revert the last migration if successfully run in the current workflow.
#   parameters:
#     # Add parameter here
#   steps:
#     - run:
#         name: Revert migrations
#         # Add when this will run
#         command: |
#           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#           SUCCESS = 1
#           if(( $SUCCESS==1 ));
#           then
#           #  cd ~/project/backend
#           #  npm install
#           #  Add revert code here. You can find this in the Getting Started section.
#             exit 1
#           fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  #
  test-frontend:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "test front end"
          command: |
            cd frontend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here

  test-backend:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "test-backend"
          command: |
            cd backend
            npm run test

      # Restore from cache
      # Your job code here

  scan-frontend:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout

      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "npm audit --audit-level=critical"
          command: |
            cd frontend
             npm install

      # Your job code here
  scan-backend:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]
      - run:
          name: "npm audit "
          command: |
            cd backend
             npm install

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udacity

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=hey \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            aws ec2 describe-instances      --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=*" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["3a:97:62:66:7a:e2:45:bc:7d:42:35:01:d7:66:f6:7b"]

      - attach_workspace:
          at: ~/

      - run:
          name: replace inventory file
          command: |
            cat ~/inventory.txt >  ~/project/.circleci/ansible/inventory.txt

            cat ~/project/.circleci/ansible/inventory.txt

      - run:
          name: Install dependencies
          command: |
            # Your code here
             cat .circleci/ansible/inventory.txt

            apk add --update ansible

      - run:
          name: Configure server
          command: |
            ls
            cd .circleci/ansible
             ansible-playbook -i inventory.txt configure-server.yml
      #Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:14.8.0
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Run migrations
          command: |
            cd backend
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              
                curl https://kvdb.io/9tF2XymnGuTpFf93d81JHm/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            # Here's where you will add some code to rollback on failure
            #

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install curl
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            export DNS_NAME=$(aws ec2 describe-instances      --query 'Reservations[*].Instances[*].PublicDnsName' --filters 'Name=tag:project,Values=*' --output text)
            echo "http://${DNS_NAME}:3030" 
            echo API_URL="http://${DNS_NAME}:3030" >> frontend/.env
            cat frontend/.env
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            rm -rf node_modules
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
        # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          at: ~/

      - add_ssh_keys:
          fingerprints: ["3a:97:62:66:7a:e2:45:bc:7d:42:35:01:d7:66:f6:7b"]

      - run:
          name: install Install dependencies
          command: |
            apk add --update nodejs npm
            apk add --update tar gzip
            apk add --update ansible

      - run:
          name: update inventory file
          command: |
            cat ~/inventory.txt >  ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: build backend
          command: |
            cd backend
            npm install
            npm run build

      - run:
          name: run zip the back-end
          command: |
            cd backend
                # echo ENVIRONMENT=production > "backend/.env"
                # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
                # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
                # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
                # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
                # echo NODE_ENV=production >> "backend/.env"
                # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
                # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
                # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
                # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
                # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            npm install
            npm run build  
            cd ..
            cd  .circleci/ansible/roles/deploy_backend/files/
            tar -C ../../../../../backend -czvf artifact.tar.gz .
            ls -a
            cd ~/project/.circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli
            apk add --update curl

      - run:
          name: Backend smoke test.
          command: |
            export DNS_NAME=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicDnsName' --filters 'Name=tag:project,Values=*' --output text)
            export API_URL="http://${DNS_NAME}:3030"
            echo  "${API_URL}/api/status"

            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
                echo ${URL}
                if curl -s ${URL} | grep "Welcome"
                then
                    # Change this to 0 after the job fails
                  exit 0
                else
                  exit 1
                fi
        # Here's where you will add some code to rollback on failure

      # Here's where you will add some code to rollback on failure
  #   cloudfront-update:
  #     docker:
  #       # Docker image here that supports AWS CLI
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Install dependencies
  #           command: |
  #             # your code here
  #       - run:
  #           name: Update cloudfront distribution
  #           command: |
  #             # your code here
  #       # Here's where you will add some code to rollback on failure

  # cleanup:
  #     docker:
  #       # Docker image here
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test
        # requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
