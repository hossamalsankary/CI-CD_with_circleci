version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@2.0.3

# main parameters for the whole script
parameters:
  docker_awsCli:
    type: string
    default: amazon/aws-cli

  docker_ansible:
    type: string
    default: python:3.7-alpine3.11

  docker_nodejs:
    type: string
    default: doctrine/nodejs-aws-cli

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here

            aws cloudformation delete-stack --stack-name cdond-c3-project-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://cdond-c3-project-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name cdond-c3-project-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/2iqx5HA6Vi2tNFsP86yURw/<<parameters.Workflow_ID>>)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  #
  test-frontend:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "test front end"
          command: |
            cd frontend
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here

  test-backend:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "test-backend"
          command: |
            cd backend
            npm run test

      # Restore from cache
      # Your job code here

  scan-frontend:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>
    steps:
      - checkout

      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "npm audit --audit-level=critical"
          command: |
            cd frontend
             npm install

      # Your job code here
  scan-backend:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]
      - run:
          name: "npm audit "
          command: |
            cd backend
             npm install

  # -------------------------------------------deploy-infrastructure----------------------------
  deploy-infrastructure:
    docker:
      - image: << pipeline.parameters.docker_awsCli >>
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --stack-name "cdond-c3-project-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udacity

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --stack-name "cdond-c3-project-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            aws ec2 describe-instances      --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - run:
          #  install tar for persist_to_workspace
          name: Install tar utility
          command: |

            yum install -y tar gzip

      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt

      - destroy-environment
      - revert-migrations
  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.docker_ansible >>
      # Docker image here that supports Ansible
    steps:
      # Checkout-- code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["3a:97:62:66:7a:e2:45:bc:7d:42:35:01:d7:66:f6:7b"]

      - attach_workspace:
          at: ~/

      - run:
          name: install awscli to excute rolleback coreectry
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*

      - run:
          name: fill inventory file with es2 IP
          command: |
            cat ~/inventory.txt >  ~/project/.circleci/ansible/inventory.txt

            cat ~/project/.circleci/ansible/inventory.txt

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |

            cd .circleci/ansible
             ansible-playbook -i inventory.txt configure-server.yml

      #Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  run-migrations:
    docker:
      - image: << pipeline.parameters.docker_nodejs >>
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Run migrations
          command: |
            sudo  apt install curl
            cd backend
            npm install
            # --- Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k -d '1' https://kvdb.io/2iqx5HA6Vi2tNFsP86yURw/${CIRCLE_WORKFLOW_ID:0:7} 
            else

               curl -k -d '0' https://kvdb.io/2iqx5HA6Vi2tNFsP86yURw/${CIRCLE_WORKFLOW_ID:0:7} 
            fi

      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      - image: << pipeline.parameters.docker_awsCli >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install curl
            yum install -y tar gzip

            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            export Back_End_IP=$(aws ec2 describe-instances      --query 'Reservations[*].Instances[*].PublicIpAddress' --filters 'Name=tag:project,Values=*' --output text)
            echo "http://${Back_End_IP}:3030" 
            echo API_URL="http://${Back_End_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
             cd frontend
            npm install
            npm run build:prod
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://cdond-c3-project-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: << pipeline.parameters.docker_ansible >>
        # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach worzkspace
      - checkout
      - attach_workspace:
          at: ~/

      - add_ssh_keys:
          fingerprints: ["3a:97:62:66:7a:e2:45:bc:7d:42:35:01:d7:66:f6:7b"]

      - run:
          name: install Install dependencies
          command: |
            apk add --update nodejs npm
            apk add --update tar gzip
            apk add --update ansible
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*

      - run:
          name: update inventory file
          command: |
            cat ~/inventory.txt >  ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: build backend
          command: |
            cd backend
            npm i
            npm run build
            ls
      - run:
          name: archive production files
          command: |
            cd ~/project/
            tar -czf artifact.tar.gz backend/* 

            ls

      - run:
          name: cp artifact file
          command: |
            cd ~/project/
            cp artifact.tar.gz .circleci/ansible/roles/deploy_backend/files

      - run:
          name: ansible-playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here'tar -czf artifact.tar.gz dist/* package*s where you will add some code to rollback on failure
      - destroy-environment

  smoke-test:
    docker:
      - image: << pipeline.parameters.docker_ansible >>
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
             && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
             apk add --update curl

      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "$API_URL/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://cdond-c3-project-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
                echo ${URL}
                if curl -s ${URL} | grep "Welcome"
                then
                    # Change this to 0 after the job fails
                  exit 0
                else
                  exit 1
                fi
        # Here's where you will add some code to rollback on failure
      - destroy-environment

      # Here's where you will add some code to rollback on failure
  cloudfront-update:
    docker:
      - image: << pipeline.parameters.docker_awsCli >>
    steps:
      - checkout

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name  initializ\
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udacity
      # Here's where yozu will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stacks
          command: |
            # Fetch the Old workflow ID  we export this workflow id from cloudformation cloudfront
            export OldWorkflowID=$(curl https://kvdb.io/2iqx5HA6Vi2tNFsP86yURw/oldworkflow) 


            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
                echo " we are clear >"
                curl -k -d ${CIRCLE_WORKFLOW_ID:0:7} https://kvdb.io/2iqx5HA6Vi2tNFsP86yURw/oldworkflow

            else
                curl -k -d ${CIRCLE_WORKFLOW_ID:0:7} https://kvdb.io/2iqx5HA6Vi2tNFsP86yURw/oldworkflow

                aws cloudformation delete-stack --stack-name "cdond-c3-project-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "cdond-c3-project-frontend-${OldWorkflowID}"

                if [[ $(aws s3 rm "s3://cdond-c3-project-${OldWorkflowID}" --recursive) ]]
                then
                   aws cloudformation delete-stack --stack-name  "cloudfront-${OldWorkflowID}"
                else
                    echo "we are clear"
                fi

            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
